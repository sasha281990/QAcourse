{
	"info": {
		"_postman_id": "edf57011-8741-4a5e-be9a-c938dea49ec8",
		"name": "HomeWork4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "sasha",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_name[0]).to.eql(\"Sasha\");\r",
							"    pm.expect(jsonData.person.u_age).to.eql(30);\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema is ok\", function() {const schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\": {\r",
							"    \"person\":{\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"u_age\": {\r",
							"                \"type\": \"integer\",\r",
							"            },\r",
							"            \"u_name\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": [\r",
							"                    {\r",
							"                        \"type\": \"string\"\r",
							"                    },\r",
							"                    {\r",
							"                        \"type\": \"integer\"\r",
							"                    },\r",
							"                    {\r",
							"                        \"type\": \"integer\"\r",
							"                    }\r",
							"                ]\r",
							"            },\r",
							"            \"u_salary_1_5_year\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"u_age\",\r",
							"            \"u_name\",\r",
							"            \"u_salary_1_5_year\"\r",
							"        ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"        \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"        \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"        \"type\": \"integer\"\r",
							"    }\r",
							"\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ]\r",
							"\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"    \r",
							"    let req = JSON.parse(request.data);\r",
							"    let resp = pm.response.json();\r",
							"    let salary = req.salary;\r",
							"    let resp_salary = resp.start_qa_salary;\r",
							"    console.log(req);\r",
							"    pm.test(\"salary test\", function () {\r",
							"       \r",
							"        pm.expect(salary*2).to.eql(resp.qa_salary_after_6_months);\r",
							"        pm.expect(salary*2.9).to.eql(resp.qa_salary_after_12_months);\r",
							"        pm.expect(salary*4).to.eql(resp.person.u_salary_1_5_year);\r",
							"    });\r",
							"\r",
							"pm.test(\"Your u_salary_1_5_year\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(2000);\r",
							"    pm.environment.set(\"salary\", jsonData.person.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : 30,\r\n    \"salary\" : 500,\r\n    \"name\" : \"Sasha\",\r\n    \"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your age and name\", function () {\r",
							"   var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData.age).to.eql(30);\r",
							"   pm.expect(jsonData.name).to.eql(\"Sasha\");\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema is ok\", function() {const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\":{\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\",\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            ]\r",
							"        }\r",
							"\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"    \r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"        const JsonData = pm.response.json();\r",
							"    let json = JSON.parse(request.data.salary);\r",
							"    let salary = JsonData.salary[0];\r",
							"    let salary1 = JsonData.salary[1];\r",
							"    let salary2 = JsonData.salary[2];\r",
							"        const parse_salary1 = parseInt(salary1);\r",
							"        const parse_salary2 = parseInt(salary2);\r",
							"    pm.test(\"salary test\", function () {\r",
							"        pm.expect(salary).to.eql(salary);\r",
							"        pm.expect(salary1).to.eql(\"1000\");\r",
							"        pm.expect(salary2).to.eql(\"1500\");\r",
							"    });\r",
							"   \r",
							"pm.test(\"salary_compare\", function (){\r",
							"    pm.expect(salary).to.lessThan(parse_salary2);\r",
							"   });\r",
							"\r",
							"pm.test(\"salary_compare\", function (){\r",
							"    pm.expect(salary).to.lessThan(parse_salary1);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sasha",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(30);\r",
							"    pm.expect(jsonData.name).to.eql(\"Sasha\");\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema is ok\", function() {const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"       \r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"    let weight = request.data.weight;\r",
							"    let resp = pm.response.json();\r",
							"    let daily_food = resp.daily_food;\r",
							"    let daily_sleep = resp.daily_sleep;\r",
							"\r",
							"    pm.test(\"weight test\", function () {\r",
							"       \r",
							"        pm.expect(daily_food).to.eql(weight*0.012);\r",
							"        pm.expect(daily_sleep).to.eql(weight*2.5);\r",
							"    });\r",
							"    \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "95",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sasha",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json-schema is ok\", function() {const schema = {\r",
							"      \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Name_comparison\", function () {\r",
							"    let resp = pm.response.json();\r",
							"    pm.expect(resp.name).to.eql(\"Sasha\") == pm.environment.set(\"name\", resp.name);\r",
							"    \r",
							"});\r",
							"\r",
							"let jsonReq = JSON.parse (request.data.age);\r",
							"let jsonRes = pm.response.json ();\r",
							"let age = jsonRes.age;\r",
							"console.log (age);\r",
							"\r",
							" pm.test(\"age_test\", function () {\r",
							"       \r",
							"        pm.expect(jsonReq).to.eql(30) == pm.expect(age).to.eql(\"30\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sasha",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let resp = pm.response.json();\r",
							"    let Cur_ID = resp.Cur_Id;\r",
							"    let random = Math.floor(Math.random() * 510) + 1;\r",
							"    console.log(random);\r",
							"\r",
							"pm.test(\"Your Cur_ID\", function () {\r",
							"    \r",
							"    pm.environment.set(\"Cur_ID\", random);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"  \r",
							"    let random = Math.floor(Math.random() * 510);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Json-schema is ok\", function() {const schema = {\r",
							"    \"type\": \"object\",\r",
							"     \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}