Номер | Keyword  |             Описание                                             |   Пример 
1     | False    | экземпляр класса bool.                                           | x = False 
--------------------------------------------------------------------------------------------------------------------------------------------------
2     | class    | ключевое слово для определения класса                            | class Foo:     pass 
--------------------------------------------------------------------------------------------------------------------------------------------------
3     | from     | предложение для импорта класса из модуля                         | from collections import OrderedDict 
--------------------------------------------------------------------------------------------------------------------------------------------------
4     | or       | Boolean оператор                                                 | x = True or False 
--------------------------------------------------------------------------------------------------------------------------------------------------
5     | None     | экземпляр объекта NoneType                                       | x = None 
--------------------------------------------------------------------------------------------------------------------------------------------------
6     | continue | оператор continue, используемый во вложенном цикле for и while.  | numbers = range(1,11) for number in numbers:     if number == 7:         continue
      |          | Он продолжается со следующего цикла ближайшей замкнутой петли.   |  
--------------------------------------------------------------------------------------------------------------------------------------------------
7     | global   | глобальный оператор позволяет нам изменять переменные вне текущей|
      |          | области видимости.                                               | x = 0 def add():     global x     x = x + 10 add() print(x) # 10 
--------------------------------------------------------------------------------------------------------------------------------------------------
8     | pass     | Оператор Python pass используется для того, чтобы ничего не дела |
      |          | ть. Это полезно, когда нам требуется какой-то оператор, но мы не | def foo():     pass 
	  |		     | хотим выполнять какой-либо код.                                  | 
--------------------------------------------------------------------------------------------------------------------------------------------------
9     | True     | экземпляр класса bool                                            | x = True 
--------------------------------------------------------------------------------------------------------------------------------------------------
10    | def      | ключевое слово, используемое для определения функции             | def bar():     print(“Hello”) 
--------------------------------------------------------------------------------------------------------------------------------------------------
11    | if       | оператор if используется для записи блока условного кода         | x = 10 if x%2 == 0:     print(“x is even”) # prints “x is even” 
--------------------------------------------------------------------------------------------------------------------------------------------------
12    | raise    | Оператор raise используется для создания исключений в программе  | def square(x):     if type(x) is not int:     raise TypeError(“Require int argument”) print(x * x) 
--------------------------------------------------------------------------------------------------------------------------------------------------
13    | and      | Логические операторы и операции                                  | x = True y = False print(x and y) # False 
--------------------------------------------------------------------------------------------------------------------------------------------------
14    | del      | Ключевое слово del используется для удаления таких объектов,     |
      |          | как переменные, список, объекты и т. д.                          | s1 = “Hello” print(s1) # Hello del s1 print(s1) # NameError: name ‘s1’ is not defined 
--------------------------------------------------------------------------------------------------------------------------------------------------
15    | import   | Оператор import используется для импорта модулей и классов в нашу| # importing class from a module from collections import OrderedDict # import module import math 
      |          | программу                                                        |
--------------------------------------------------------------------------------------------------------------------------------------------------
16    | return   | Оператор return используется в функции для возврата значения     | def add(x,y):     return x+y 
--------------------------------------------------------------------------------------------------------------------------------------------------
17    | as       | Ключевое слово Python as используется для предоставления имени   | from collections import OrderedDict as od import math as m with open(‘data.csv’) as file:     pass     
      |          | для импорта, кроме оператора и оператора with                    | # do some processing on file try:     pass except TypeError as e:     pass 
--------------------------------------------------------------------------------------------------------------------------------------------------
18    | elif     | Оператор elif всегда используется вместе с оператором if для     | x = 10 if x > 10:     print(‘x is greater than 10’) elif x > 100:     
      |          | операции «else if»                                               | print(‘x is greater than 100’) elif x == 10:     print(‘x is equal to 10’) else:     print(‘x is less than 10’) 
--------------------------------------------------------------------------------------------------------------------------------------------------
19    | in       | Python в Ключевое слово используется, чтобы проверить членство   | l1 = [1, 2, 3, 4, 5] if 2 in l1:     print(‘list contains 2’) s = ‘abcd’ if ‘a’ in s:     print(‘string contains a’) 
--------------------------------------------------------------------------------------------------------------------------------------------------
20    | try      | Оператор try используется для написания кода обработки исключений| x = ” try:     i = int(x) except ValueError as ae:     print(ae) # invalid literal for int() with base 10: ” 
--------------------------------------------------------------------------------------------------------------------------------------------------
21    | assert   | Оператор assert позволяет нам вставлять отладочные утверждения в |
      |          | программу. Если утверждение верно, программа продолжает работать.| def divide(a, b):     assert b != 0     return a / b 
	  |		     | В противном случае выбрасывается AssertionError.                 |  
--------------------------------------------------------------------------------------------------------------------------------------------------
22    | else     | Оператор else используется с условиями if-elif. Он используется  |
      |          | для выполнения операторов, когда ни одно из предыдущих условий   | if False:     pass else:     print(‘this will always print’) 
	  |		     | не является истинным                                             | 
--------------------------------------------------------------------------------------------------------------------------------------------------
23    | is       | Ключевое слово Python is используется для проверки того,         |
      |          | ссылаются ли две переменные на один и тот же объект. Это то же   |
	  |		     | самое, что использовать оператор==                               | fruits = [‘apple’] fruits1 = [‘apple’] f = fruits print(f is fruits) # True print(fruits1 is fruits) # False 
--------------------------------------------------------------------------------------------------------------------------------------------------
24    | while    | Оператор while используется для выполнения блока операторов до   |
      |          | тех пор, пока выражение не станет истинным                       | i = 0 while i < 3:     print(i)     i+=1 # Output # 0 # 1 # 2 
--------------------------------------------------------------------------------------------------------------------------------------------------
25    | async    | Новое ключевое слово, введенное в Python 3.5. Это ключевое слово | import asyncio import time async def ping(url):     print(f’Ping Started for {url}’)await asyncio.sleep(1)     print(f’Ping Finished for {url}’) async def main():     
      |          | всегда используется в теле функции couroutine. Он используется с | await asyncio.gather(     ping(‘askpython.com’),     ping(‘python.org’),     ) if __name__ == ‘__main__’:     then = time.time()     loop = asyncio.get_event_loop()     
	  | 		 | модулем ввода-вывода и await                                     | loop.run_until_complete(main())     now = time.time()     print(f’Execution Time = {now – then}’) # Output Ping Started for askpython.com Ping Started for python.org Ping Finished for askpython.com Ping Finished for python.org Execution Time = 1.004091739654541 
--------------------------------------------------------------------------------------------------------------------------------------------------
26    | await    | Новое ключевое слово в Python 3.5 для асинхронной обработки      | Above example demonstrates the use of async and await keywords. 
--------------------------------------------------------------------------------------------------------------------------------------------------
27    | lambda   | Ключевое слово lambda используется для создания лямбда-выражений | multiply = lambda a, b: a * b print(multiply(8, 6)) # 48 
--------------------------------------------------------------------------------------------------------------------------------------------------
28    | with     | Python с заявлением используется, чтобы обернуть выполнения блока|
      |          | с методами, определенными в контексте менеджера. Объект должен   | with open(‘data.csv’) as file:     file.read() 
	  |		     | реализовывать функции__ enter _ _ () и _ _ exit__ ()             | 
--------------------------------------------------------------------------------------------------------------------------------------------------
29    | except   | except используется для перехвата исключений, брошенных в блоке  | Please check the try keyword example.
      |          | try, и их обработки                                              | 
--------------------------------------------------------------------------------------------------------------------------------------------------
30    | finally  | Оператор finally используется с операторами try-except. Код в    | def division(x, y):     try:         return x / y     except ZeroDivisionError as e:         print(e)         return -1     finally:         
      |          | блоке finally всегда выполняется. Он в основном используется для | print(‘this will always execute’) print(division(10, 2)) print(division(10, 0)) # Output this will always execute 5.0 division by zero this will always execute -1 
	  |		     | закрытия ресурсов                                                | 
--------------------------------------------------------------------------------------------------------------------------------------------------
31    | nonlocal | nonlocal используется для доступа к переменным, определенным вне |
      |          | области действия блока. Это всегда используется во вложенных     |def outer():     v = ‘outer’     def inner():         nonlocal v         v = ‘inner’     inner()     print(v) outer() 
	  |		     | функциях для доступа к переменным, определенным снаружи          | 
--------------------------------------------------------------------------------------------------------------------------------------------------
32    | yield    | yield-это замена ключевого слова return. Это используется для    | def multiplyByTen(*kwargs):     for i in kwargs:         yield i * 10 a = multiplyByTen(4, 5,) 
      |          | возврата значений из функции одно за другим                      | # a is generator object, an iterator # showing the values for i in a:     print(i) # Output 40 50 
--------------------------------------------------------------------------------------------------------------------------------------------------
33    | break    | Оператор break используется с вложенными циклами” for “и” while».|
      |          | Он останавливает выполнение текущего цикла и передает управление | number = 1 while True:     print(number)     number += 2     if number > 5:         break         print(number) # never executed # Output 1 3 5 
	  |		     | в начало цикла                                                   | 
--------------------------------------------------------------------------------------------------------------------------------------------------
34    | for      | for используется для перебора элементов последовательности или   |
      |          | итеративного объекта                                             |  s1 = ‘Hello’ for c in s1:     print(c) # Output H e l l o 
--------------------------------------------------------------------------------------------------------------------------------------------------
35    | not      | not используется для логической операции                         | not x = 20 if x is not 10:     print(‘x is not equal to 10’) x = True print(not x) # False
Источник: https://pythononline.ru/osnovy/klyuchevye-slova-python
--------------------------------------------------------------------------------------------------------------------------------------------------